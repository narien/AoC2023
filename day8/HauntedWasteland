from math import lcm

def buildLookupMap(lines):
    map = {}
    for line in lines:
        source, _, left, right = line.split()
        left = left[1:-1]
        right = right[0:-1]
        map[source] = (left, right)
    return map

def countStepsToZ(currPos, instructions, map, winCondition):
    count = 0
    while True:
        for c in instructions:
            if c == 'L':
                currPos = map[currPos][0]
            else:
                currPos = map[currPos][1]
            count += 1
            if winCondition(currPos):
                return count

def getAllStartingNodes(nodes):
    startingNodes = []
    for node in nodes:
        if node[2] == 'A':
            startingNodes.append(node)
    return startingNodes

if __name__ == '__main__':
    with open('day8/input.txt') as f:
        lines = [line.strip() for line in f]
    instructions = lines[0]
    lines= lines[2:]
    map = buildLookupMap(lines)
    print('Steps from AAA to ZZZ are: ' + str(countStepsToZ('AAA', instructions, map, lambda s : s == 'ZZZ')))

    nodes = getAllStartingNodes(map.keys())
    counts = []
    for node in nodes:
        counts.append(countStepsToZ(node, instructions, map, lambda s : s[2] == 'Z'))

    print('LCM is: ' + str(lcm(*counts)))